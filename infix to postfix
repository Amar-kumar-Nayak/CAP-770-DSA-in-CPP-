#include <iostream>

struct Node {
    int key;
    Node* left;
    Node* right;
};

// A utility function to create a new BST node
Node* newNode(int item) {
    Node* temp = new Node();
    temp->key = item;
    temp->left = temp->right = nullptr;
    return temp;
}

// A utility function to do inorder traversal of BST
void inorder(Node* root) {
    if (root != nullptr) {
        inorder(root->left);
        std::cout << root->key << " ";
        inorder(root->right);
    }
}

// A utility function to insert a new node with given key in BST
Node* insert(Node* node, int key) {
    // If the tree is empty, return a new node
    if (node == nullptr)
        return newNode(key);

    // Otherwise, recur down the tree
    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);

    // Return the (unchanged) node pointer
    return node;
}

// Driver Code
int main() {
    /* Let us create following BST
        50
       /  \
      30   70
     / \   / \
    20  40 60 80 */

    Node* root = nullptr;
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);

    // Print inorder traversal of the BST
    inorder(root);

    return 0;
}
